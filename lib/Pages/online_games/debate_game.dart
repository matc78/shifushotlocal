import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:shifushotlocal/theme/app_theme.dart';
import 'dart:convert';
import 'package:flutter/services.dart' show rootBundle;


class DebateGameScreen extends StatefulWidget {
  final String lobbyId;

  const DebateGameScreen({super.key, required this.lobbyId});

  @override
  _DebateGameScreenState createState() => _DebateGameScreenState();
}

class _DebateGameScreenState extends State<DebateGameScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  late String userId;
  String role = "";
  bool showRole = true;
  Map<String, dynamic> players = {};
  String? eliminatedPlayer;
  Map<String, int> votes = {};
  bool votingComplete = false;
  final bool _rolesAssigned = false; // ‚úÖ Ajout du flag
  Map<String, String> playerNames = {}; // Stockage des pr√©noms
  Map<String, bool> hasVoted = {}; // Indique qui a vot√©
  int totalVotes = 0; // Nombre de votes exprim√©s
  bool _namesFetched = false;
  StreamSubscription<DocumentSnapshot>? _voteSubscription;
  Set<String> eliminatedPlayers = {};
  bool showRolePopup = false;
  String civilDebate = ""; // D√©bat affich√© aux civils
  String debateWord1 = "";
  String debateWord2 = "";
  int _currentTurn = 1; // ‚úÖ Compteur des tours
  String? currentSpeaker; // ‚úÖ Joueur qui commence √† parler
  List<String> voteMessages = [];


  @override
  void initState() {
    super.initState();
    userId = _auth.currentUser!.uid;
    _checkAndAssignRoles();
    _listenForVotes(); // üîÑ √âcoute des votes en temps r√©el
    _fetchPlayerNames(); // üîπ R√©cup√©rer les noms des joueurs
    _listenForGameEnd(); // üèÅ V√©rifie la fin de la partie

    Future.delayed(const Duration(seconds: 5), () {
      if (mounted) {
        setState(() => showRole = false);
      }
    });
  }


  Future<void> _checkAndAssignRoles() async {
  DocumentSnapshot lobbyDoc = await _firestore.collection('lobbies').doc(widget.lobbyId).get();
  if (!lobbyDoc.exists) {
    print("‚ùå Erreur : Lobby introuvable.");
    return;
  }

  Map<String, dynamic>? lobbyData = lobbyDoc.data() as Map<String, dynamic>?;
  if (lobbyData == null) return;

  // ‚úÖ V√©rifie si les r√¥les ET le d√©bat sont d√©j√† assign√©s
  if (lobbyData.containsKey('roles') && lobbyData.containsKey('debate')) {
    print("‚è≠Ô∏è R√¥les et d√©bat d√©j√† assign√©s, r√©cup√©ration...");
    if (mounted) {
      setState(() {
        players = Map<String, dynamic>.from(lobbyData['roles']);
        role = players[userId] ?? "Civil";
        debateWord1 = lobbyData['debate']['word1'] ?? "???";
        debateWord2 = lobbyData['debate']['word2'] ?? "???";
        civilDebate = "$debateWord1 vs $debateWord2";
      });
    }
  } else {
    // üöÄ Seul l'h√¥te assigne les r√¥les et choisit un d√©bat
    if (lobbyData['hostId'] == userId) {
      await _assignRoles();
    } else {
      print("‚è≥ Attente des r√¥les et du d√©bat...");
    }
  }
}


  Future<void> _assignRoles() async {
    if (_rolesAssigned) return; // ‚úÖ V√©rification de s√©curit√©

    print("üü¢ V√©rification du r√¥le de l'h√¥te...");
    DocumentSnapshot lobbyDoc = await _firestore.collection('lobbies').doc(widget.lobbyId).get();
    if (!lobbyDoc.exists) {
      print("‚ùå Erreur : Le lobby n'existe pas.");
      return;
    }

    Map<String, dynamic>? lobbyData = lobbyDoc.data() as Map<String, dynamic>?;
    if (lobbyData == null) return;

    // V√©rifier si l'utilisateur est l'h√¥te
    String hostId = lobbyData['hostId'];
    bool isHost = (userId == hostId);

    // Si les r√¥les existent d√©j√†, on les r√©cup√®re plut√¥t que de les r√©attribuer
    if (lobbyData.containsKey('roles') && lobbyData.containsKey('debate')) {
      print("‚è≠Ô∏è R√¥les et d√©bat d√©j√† assign√©s, r√©cup√©ration...");
      if (mounted) {
        setState(() {
          players = Map<String, dynamic>.from(lobbyData['roles']);
          role = players[userId] ?? "Civil";
          debateWord1 = lobbyData['debate']['word1'] ?? "???";
          debateWord2 = lobbyData['debate']['word2'] ?? "???";
          civilDebate = "$debateWord1 vs $debateWord2";
        });
        print("‚úÖ R√¥les r√©cup√©r√©s : $players, D√©bat -> $debateWord1 vs $debateWord2");
      }
      return;
    }

    // L'h√¥te attribue les r√¥les et choisit un d√©bat
    if (isHost) {
      print("üëë Cet utilisateur est l'h√¥te. Attribution des r√¥les et choix du d√©bat...");

      List<dynamic> playerIds = List.from(lobbyData['players'] ?? []);
      List<dynamic> nonEliminated = playerIds;
      nonEliminated.shuffle();
      String firstSpeaker = nonEliminated.first;
      playerIds.shuffle(); // M√©lange des joueurs
      String impostor = playerIds.first; // Premier joueur = imposteur
      

      Map<String, dynamic> assignedRoles = {};
      for (String id in playerIds) {
        assignedRoles[id] = (id == impostor) ? "Imposteur" : "Civil";
      }

      // üî• G√©n√©ration et stockage du d√©bat
      List<String> chosenDebate = await _chooseDebate();
      String debate1 = chosenDebate[0];
      String debate2 = chosenDebate[1];

      // üîÑ Mise √† jour Firestore
      await _firestore.collection('lobbies').doc(widget.lobbyId).update({
        'roles': assignedRoles,
        'debate': {'word1': debate1, 'word2': debate2},
        'currentTurn': 1, // ‚úÖ Tour 1
        'currentSpeaker': firstSpeaker, // ‚úÖ Premier joueur choisi
      });

      print("‚úÖ R√¥les et d√©bat enregistr√©s : $assignedRoles, D√©bat -> $debate1 vs $debate2");
    } else {
      print("‚è≥ Cet utilisateur n'est pas l'h√¥te. Attente des r√¥les et du d√©bat...");
    }

    // üîπ R√©cup√©rer les r√¥les et le d√©bat apr√®s mise √† jour (pour tout le monde)
    DocumentSnapshot updatedLobbyDoc = await _firestore.collection('lobbies').doc(widget.lobbyId).get();
    
    if (updatedLobbyDoc.exists) {
      Map<String, dynamic> updatedData = updatedLobbyDoc.data() as Map<String, dynamic>;

      if (mounted) {
        setState(() {
          players = Map<String, dynamic>.from(updatedData['roles']);
          role = players[userId] ?? "Civil";
          debateWord1 = updatedData['debate']['word1'] ?? "???";
          debateWord2 = updatedData['debate']['word2'] ?? "???";
          civilDebate = "$debateWord1 vs $debateWord2";
        });
      }
    }
  }


  Future<List<String>> _chooseDebate() async {
    try {
      // Charge le fichier JSON contenant les d√©bats
      String jsonString = await rootBundle.loadString('assets/jsons/debate.json');
      List<dynamic> rawDebates = json.decode(jsonString);

      // V√©rifie que chaque √©l√©ment est une liste de 2 cha√Ænes
      List<List<String>> debates = rawDebates.map((debate) => List<String>.from(debate)).toList();

      if (debates.isNotEmpty) {
        return debates[DateTime.now().millisecondsSinceEpoch % debates.length]; // S√©lection al√©atoire
      }
    } catch (e) {
      print("‚ö†Ô∏è Erreur lors du chargement du d√©bat : $e");
    }
    return ["Erreur", "D√©bat introuvable"]; // Valeur de secours en cas d'erreur
  }


  Future<void> _fetchPlayerNames() async {

    if (_namesFetched) return; // ‚úÖ Emp√™cher les appels multiples
    _namesFetched = true;
    DocumentSnapshot lobbyDoc = await _firestore.collection('lobbies').doc(widget.lobbyId).get();
    if (!lobbyDoc.exists) return;

    List<dynamic> playerIds = List.from(lobbyDoc['players'] ?? []);
    Map<String, String> names = {};

    for (String playerId in playerIds) {
      DocumentSnapshot userDoc = await _firestore.collection('users').doc(playerId).get();
      if (userDoc.exists) {
        names[playerId] = userDoc['name'] ?? "Joueur inconnu";
      }
    }

    if (mounted) { // ‚úÖ V√©rifie si le widget est toujours dans l‚Äôarbre avant `setState()`
      setState(() {
        playerNames = names;
      });
    }

    print("‚úÖ Noms des joueurs r√©cup√©r√©s : $playerNames");
  }


  @override
  void dispose() {
    _voteSubscription?.cancel(); // ‚úÖ Annule l'√©coute Firestore
    super.dispose();
  }


  void _listenForVotes() {
    _firestore.collection('lobbies').doc(widget.lobbyId).snapshots().listen((snapshot) {
      if (!snapshot.exists) return;

      Map<String, dynamic>? data = snapshot.data();
      if (data == null) return;

      // üîπ Mise √† jour des votes et des joueurs qui ont vot√©
      Map<String, int> updatedVotes = Map<String, int>.from(data['votes'] ?? {});
      Map<String, bool> updatedHasVoted = Map<String, bool>.from(data['hasVoted'] ?? {});
      List<String> updatedVoteMessages = List<String>.from(data['voteMessages'] ?? []);

      // üîπ R√©cup√©ration du tour actuel et du joueur qui commence
      int updatedTurn = data.containsKey('currentTurn') ? data['currentTurn'] : _currentTurn;
      String? updatedSpeaker = data.containsKey('currentSpeaker') ? data['currentSpeaker'] : currentSpeaker;

      // üîπ V√©rifier si le jeu est termin√© (stock√© dans Firestore)
      String? gameOverMessage = data.containsKey('gameOverMessage') ? data['gameOverMessage'] : null;

      if (mounted) {
        setState(() {
          votes = updatedVotes;
          hasVoted = updatedHasVoted;
          voteMessages = updatedVoteMessages;
          _currentTurn = updatedTurn;
          currentSpeaker = updatedSpeaker;
          
          // üîπ On ne compte que les votes des joueurs NON √©limin√©s
          totalVotes = updatedVotes.values.fold(0, (sum, val) => sum + val);
          int remainingPlayers = players.isNotEmpty 
              ? players.keys.where((id) => !eliminatedPlayers.contains(id)).length
              : 0;

          print("üó≥ Total Votes: $totalVotes / $remainingPlayers");

          // ‚úÖ V√©rifier si tous les survivants ont vot√© et lancer l'√©limination
          if (totalVotes >= remainingPlayers && !votingComplete) {
            _eliminatePlayer();
          }

          // ‚úÖ V√©rifier si la partie est termin√©e et afficher le message
          if (gameOverMessage != null && gameOverMessage.isNotEmpty) {
            _endGame(gameOverMessage);
          }
        });
      }
    });
  }


  Future<void> _votePlayer(String targetPlayerId) async {
    if (hasVoted[userId] == true) return; // Emp√™cher de voter plusieurs fois
    print("üì© Vote pour √©liminer : $targetPlayerId");

    String voterName = playerNames[userId] ?? "Inconnu";
    //String targetName = playerNames[targetPlayerId] ?? "Inconnu";

    await _firestore.collection('lobbies').doc(widget.lobbyId).update({
      'votes.$targetPlayerId': FieldValue.increment(1),
      'hasVoted.$userId': true,
      'voteMessages': FieldValue.arrayUnion(["$voterName a vot√©"]),
    });

    setState(() {
      hasVoted[userId] = true; // D√©sactive le bouton imm√©diatement sur l'UI
    });
  }


  void _eliminatePlayer() async {
  if (votes.isEmpty) return;

  String playerToEliminate = votes.entries.reduce((a, b) => a.value > b.value ? a : b).key;
  String eliminatedName = playerNames[playerToEliminate] ?? "Joueur inconnu";

  print("‚ùå Joueur √©limin√© : $playerToEliminate");

  eliminatedPlayers.add(playerToEliminate);

  await _firestore.collection('lobbies').doc(widget.lobbyId).update({
    'eliminated': playerToEliminate,
    'votes': {}, 
    'hasVoted': {}, 
    'voteMessages': FieldValue.arrayUnion(["üíÄ $eliminatedName a √©t√© √©limin√© !"]),
  });

  if (mounted) {
    setState(() {
      eliminatedPlayer = playerToEliminate;
      votingComplete = true;
    });
  }

  await Future.delayed(const Duration(seconds: 5));

  if (players[playerToEliminate] == "Imposteur") {
    _askImpostorGuess(playerToEliminate);
  } else {
    _checkGameEnd(playerToEliminate);
  }
}


  void _askImpostorGuess(String impostorId) {
  if (userId != impostorId) return; // üîπ Seul l'imposteur voit le pop-up

  TextEditingController guessController = TextEditingController();

  showDialog(
    context: context,
    barrierDismissible: false,
    builder: (_) => AlertDialog(
      title: const Text("üîÆ Devinez un mot"),
      content: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          const Text("L'imposteur a √©t√© √©limin√© !\nIl peut encore gagner en devinant un des mots du d√©bat."),
          const SizedBox(height: 10),
          TextField(
            controller: guessController,
            decoration: const InputDecoration(hintText: "Entrez un mot"),
          ),
        ],
      ),
      actions: [
        TextButton(
          onPressed: () async {
            String guess = guessController.text.trim().toLowerCase(); // üî• Suppression espaces + mise en minuscule
            String word1 = debateWord1.trim().toLowerCase();
            String word2 = debateWord2.trim().toLowerCase();

            bool impostorWins = (guess == word1 || guess == word2);

            String gameOverMessage = impostorWins
                ? "üëø L'imposteur a gagn√© en devinant '$guess' !"
                : "üéâ Les civils ont gagn√© !";

            print("üîÆ L'imposteur a devin√© : $guess, mots : $debateWord1 / $debateWord2");

            Navigator.pop(context); // üîÑ Ferme la bo√Æte de dialogue

            // üî• √âcrire dans Firestore que la partie est termin√©e
            await _firestore.collection('lobbies').doc(widget.lobbyId).update({
              'gameOverMessage': gameOverMessage,
            });

          },
          child: const Text("Valider"),
        ),
      ],
    ),
  );
}


  void _listenForGameEnd() {
    _firestore.collection('lobbies').doc(widget.lobbyId).snapshots().listen((snapshot) {
      if (!snapshot.exists) return;

      Map<String, dynamic>? data = snapshot.data();
      if (data == null) return;

      if (data.containsKey('gameOverMessage')) {
        String message = data['gameOverMessage'];

        print("üèÅ Fin de partie d√©tect√©e : $message");

        if (mounted) {
          _endGame(message); // üöÄ Affiche le message de fin de partie √† tout le monde
        }
      }
    });
  }



  void _checkGameEnd(String eliminatedPlayer) {
  print("üîç V√©rification de la fin de partie...");

  // Fin du jeu si l'imposteur est √©limin√©
  if (players[eliminatedPlayer] == "Imposteur") {
    _endGame("üéâ Les civils ont gagn√© !");
    return;
  }

  // V√©rification du nombre de joueurs restants
  int remainingPlayers = players.keys.where((playerId) => !eliminatedPlayers.contains(playerId)).length;

  if (remainingPlayers == 1) {
    _endGame("üëø L'imposteur a gagn√© !");
    return;
  }

  // Relance un nouveau vote avec les joueurs actifs
  _startNewVote();
}



  Future<void> _startNewVote() async {
    print("üîÑ Nouveau vote lanc√©...");
    
    // S√©lectionner un nouveau joueur qui commence √† parler (parmi ceux non √©limin√©s)
    List<String> remainingPlayers = players.keys.where((id) => !eliminatedPlayers.contains(id)).toList();
    if (remainingPlayers.isNotEmpty) {
      remainingPlayers.shuffle();
      currentSpeaker = remainingPlayers.first;
    }

    // üîπ Incr√©menter le tour
    _currentTurn++;

    await _firestore.collection('lobbies').doc(widget.lobbyId).update({
      'votes': {}, // Reset votes
      'hasVoted': {}, // Reset qui a vot√©
      'voteMessages': [], // Nettoyer les messages pour un nouveau tour
      'currentTurn': _currentTurn,
      'currentSpeaker': currentSpeaker, // Stocke qui parle en premier
    });

    if (mounted) {
      setState(() {
        eliminatedPlayer = null;
        votingComplete = false;
      });
    }
  }



  void _endGame(String message) {
    print("üèÅ Fin de la partie : $message");

    showDialog(
      context: context,
      barrierDismissible: false, // Emp√™che de fermer sans cliquer sur le bouton
      builder: (_) => AlertDialog(
        title: const Text("Fin de Partie"),
        content: Text(message),
        actions: [
          TextButton(
            onPressed: () async {
              await _leaveLobby(); // Supprime le joueur du lobby
              if (mounted) {
                Navigator.pushNamedAndRemoveUntil(context, "/homepage", (route) => false);
              }
            },
            child: const Text("üè† Retourner √† l'accueil"),
          ),
        ],
      ),
    );
  }



  Future<void> _leaveLobby() async {
    final User? user = _auth.currentUser;
    if (user == null) return;

    DocumentReference lobbyRef = _firestore.collection('lobbies').doc(widget.lobbyId);
    DocumentSnapshot lobbyDoc = await lobbyRef.get();

    if (!lobbyDoc.exists) return;

    List<dynamic> playersList = List.from(lobbyDoc['players']);
    playersList.remove(user.uid);

    if (playersList.isEmpty) {
      // üö® Supprime le lobby si plus personne
      await lobbyRef.delete();
      if (kDebugMode) {
        print("üèÅ Lobby supprim√© car plus aucun joueur.");
      }
    } else {
      // üîÑ Met √† jour le lobby avec un nouvel h√¥te
      await lobbyRef.update({
        'players': playersList,
        'hostId': playersList.first, // Nouveau h√¥te
      });
    }

    if (kDebugMode) {
      print("üö™ Joueur ${user.uid} a quitt√© le lobby.");
    }
  }



  @override
  Widget build(BuildContext context) {
    final theme = AppTheme.of(context);

    return StreamBuilder<DocumentSnapshot>(
      stream: _firestore.collection('lobbies').doc(widget.lobbyId).snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData || !snapshot.data!.exists) {
          return Scaffold(
            body: Center(child: Text("Lobby introuvable", style: theme.titleLarge)),
          );
        }

        var lobbyData = snapshot.data!.data() as Map<String, dynamic>? ?? {};
        if (!lobbyData.containsKey('roles')) {
          if (lobbyData['hostId'] == userId) {
            if (kDebugMode) {
              print("üëë H√¥te d√©tect√©, attribution des r√¥les...");
            }
            _assignRoles();
          } else {
            if (kDebugMode) {
              print("‚è≥ En attente des r√¥les...");
            }
          }
        } else {
          players = Map<String, dynamic>.from(lobbyData['roles']);
          role = players[userId] ?? "Civil";
        }

        // üìå Affichage du r√¥le au d√©but de la partie
        if (showRole) {
          return Scaffold(
            body: Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    playerNames[userId] ?? "Joueur inconnu",
                    style: theme.titleLarge.copyWith(fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 10),
                  Text(
                    "Votre r√¥le : $role",
                    style: theme.titleLarge,
                  ),
                  if (role == "Civil") // üîπ Affiche uniquement pour les civils
                    Padding(
                      padding: const EdgeInsets.all(10.0),
                      child: Text(
                        "üé≠ D√©bat : $civilDebate",
                        textAlign: TextAlign.center,
                        style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.blue),
                      ),
                    ),
                ],
              ),
            ),
          );
        }

        return Scaffold(
          backgroundColor: theme.background, // ‚úÖ Fond de l'application
          appBar: AppBar(
            title: const Text("Jeu du d√©bat"),
            backgroundColor: theme.background, // ‚úÖ Couleur de l'AppBar
            foregroundColor: theme.primary, // ‚úÖ Texte en blanc
            actions: [
              IconButton(
                icon: Icon(Icons.info_outline, color: theme.primary), // ‚úÖ Ic√¥ne rouge
                onPressed: () {
                  showDialog(
                    context: context,
                    builder: (_) => AlertDialog(
                      backgroundColor: theme.background, // ‚úÖ Adaptation du th√®me
                      title: Text("üìú R√®gles du jeu", style: theme.titleMedium),
                      content: Text(
                        "Les joueurs civils doivent identifier l‚Äôimposteur en d√©battant sur le sujet affich√©.\n\n"
                        "L‚Äôimposteur doit essayer de semer le doute sans se faire d√©couvrir.\n\n"
                        "√Ä chaque tour, les joueurs votent pour √©liminer un suspect. La partie se termine lorsque l‚Äôimposteur est d√©couvert ou qu‚Äôil reste seul.",
                        textAlign: TextAlign.justify,
                        style: theme.bodyMedium,
                      ),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.pop(context),
                          child: Text("OK", style: theme.bodyLarge),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ],
          ),
          body: Column(
            children: [
              Text("Joueurs :", style: theme.titleMedium),
              Expanded(
                child: ListView(
                  children: players.keys.map((playerId) {
                    bool isEliminated = eliminatedPlayers.contains(playerId);
                    bool isCurrentUserEliminated = eliminatedPlayers.contains(userId);
                    bool canVote = !isEliminated && !isCurrentUserEliminated && hasVoted[userId] != true && !votingComplete;

                    return ListTile(
                      title: Text(
                        playerNames[playerId] ?? "Joueur inconnu",
                        style: TextStyle(
                          color: isEliminated ? Colors.grey : Colors.black,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      trailing: isEliminated || isCurrentUserEliminated
                          ? null
                          : canVote
                              ? ElevatedButton(
                                  onPressed: () => _votePlayer(playerId),
                                  child: const Text("Voter"),
                                )
                              : const Text("‚úîÔ∏è A vot√©", style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold)),
                    );
                  }).toList(),
                ),
              ),

              // üîπ Tour actuel et joueur qui commence
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: Column(
                  children: [
                    Text("Tour $_currentTurn", style: theme.titleMedium.copyWith(fontWeight: FontWeight.bold)), // ‚úÖ Affichage du tour
                    if (currentSpeaker != null && playerNames.containsKey(currentSpeaker))
                      Padding(
                        padding: const EdgeInsets.only(top: 5.0),
                        child: Text(
                          "üéô ${playerNames[currentSpeaker]!} commence ce tour.",
                          style: theme.bodyMedium.copyWith(color: theme.secondary, fontWeight: FontWeight.bold), // ‚úÖ Rouge + Gras
                        ),
                      ),
                  ],
                ),
              ),

              // üîπ Bouton "Voir mon r√¥le"
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: theme.buttonColor, // ‚úÖ Couleur du bouton
                    padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 20.0),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8.0)), // ‚úÖ Arrondi
                  ),
                  onPressed: () {
                    showDialog(
                      context: context,
                      builder: (_) => AlertDialog(
                        backgroundColor: theme.background, // ‚úÖ Fond de l'alerte
                        title: Text("Votre r√¥le", style: theme.titleMedium),
                        content: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(
                              "Vous √™tes : $role",
                              style: theme.bodyLarge.copyWith(fontSize: 20, fontWeight: FontWeight.bold), // ‚úÖ Augment√© √† 24px
                            ),
                            if (role == "Civil")
                              Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: Text(
                                  "üé≠ D√©bat : $civilDebate",
                                  textAlign: TextAlign.center,
                                  style: theme.bodyMedium.copyWith(fontSize: 18, fontWeight: FontWeight.bold, color: theme.secondary), // ‚úÖ Augment√© √† 22px
                                ),
                              ),
                          ],
                        ),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text("OK", style: theme.bodyLarge),
                          ),
                        ],
                      ),
                    );
                  },
                  child: Text("üëÄ Voir mon r√¥le", style: theme.buttonText), // ‚úÖ Texte stylis√©
                ),
              ),

              // üîπ Liste des votes en temps r√©el
              Padding(
                padding: const EdgeInsets.all(10.0),
                child: Column(
                  children: voteMessages.map((message) => Text(message, style: theme.bodyLarge)).toList(),
                ),
              ),

              // üîπ Affichage du joueur √©limin√© avec son r√¥le
              if (eliminatedPlayer != null)
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Column(
                    children: [
                      Text(
                        "üíÄ ${playerNames[eliminatedPlayer] ?? "Joueur inconnu"} a √©t√© √©limin√© !",
                        style: theme.titleMedium.copyWith(color: theme.secondary), // ‚úÖ Texte rouge
                      ),
                      const SizedBox(height: 5),
                      Text(
                        "Son r√¥le √©tait : ${players[eliminatedPlayer] ?? "Inconnu"}",
                        style: theme.bodyMedium.copyWith(color: theme.textSecondary), // ‚úÖ Couleur secondaire
                      ),
                    ],
                  ),
                ),

              // üîπ Affichage du message "En attente des votes"
              if (!votingComplete)
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Text(
                    "üïí En attente du vote des autres joueurs... $totalVotes/${players.length - eliminatedPlayers.length}",
                    style: theme.bodyMedium.copyWith(color: Colors.blue, fontWeight: FontWeight.bold),
                  ),
                ),
            ],
          ),
        );
      },
    );
  }
}